# Integration Notes & Gotchas

## Quick Tips

### 1. Slang DLL Deployment
**Problem:** Runtime error "slang.dll not found"

**Solution:** Copy DLL to executable directory
```cmake
add_custom_command(TARGET chameleonrt POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "${Slang_ROOT}/bin/slang.dll"
        "$<TARGET_FILE_DIR:chameleonrt>"
)
```

### 2. SLANG_PATH Environment Variable
**Best practice:** Set in PowerShell profile or system environment

```powershell
$env:SLANG_PATH = "C:\dev\slang\build\Debug"
```

Or in CMake:
```powershell
cmake -B build -DSlang_ROOT=C:\dev\slang\build\Debug
```

### 3. Shader Model Version
**Default:** sm_6_5 (broad compatibility)
**Advanced:** sm_6_6 (newer features, requires Windows 10 20H1+)

In `slang_shader_compiler.cpp`:
```cpp
targetDesc.profile = globalSession->findProfile("sm_6_5");
// Or for newer features:
// targetDesc.profile = globalSession->findProfile("sm_6_6");
```

### 4. SPIRV Target Version
**Default:** spirv_1_5
**Adjust for Vulkan version:**
- Vulkan 1.0 → spirv_1_0
- Vulkan 1.1 → spirv_1_3
- Vulkan 1.2 → spirv_1_5

### 5. Entry Point Names
**Important:** Entry point name in C++ must match shader exactly

```cpp
// Shader:
[shader("vertex")]
VSOutput vertexMain(VSInput input) { ... }

// C++:
compiler.compileSlangToDXIL(source, "vertexMain", ShaderStage::Vertex);
//                                    ^^^^^^^^^^^
//                                    Must match exactly!
```

### 6. Linking Order
**Correct:**
```cmake
target_link_libraries(crt_dxr PRIVATE
    util                    # ChameleonRT utilities first
    display
    slang_compiler_util     # Then Slang
    d3d12.lib              # Then platform libs
)
```

### 7. Include Paths
If getting "slang.h not found":

```cmake
target_include_directories(your_target PRIVATE
    ${Slang_INCLUDE_DIRS}  # From FindSlang
)
```

### 8. Dual Compilation During Migration
Keep both paths available:

```cpp
std::vector<uint8_t> CompileShader(...) {
#ifdef USE_SLANG_COMPILER
    auto blob = slangCompiler.compileHLSLToDXIL(...);
    if (!blob) {
        // Fallback to DXC on error during testing
        return CompileWithDXC(...);
    }
    return blob->bytecode;
#else
    return CompileWithDXC(...);
#endif
}
```

### 9. Error Diagnostics
Always check and print diagnostics:

```cpp
auto blob = compiler.compileSlangToDXIL(...);
if (!blob) {
    std::cerr << "Slang error: " << compiler.getLastError() << std::endl;
    // Diagnostics include line numbers and helpful messages
}
```

### 10. Bytecode Size Check
Sanity check:

```cpp
auto blob = compiler.compileSlangToDXIL(...);
if (blob && blob->bytecode.empty()) {
    throw std::runtime_error("Shader compiled but bytecode is empty!");
}
std::cout << "Compiled shader: " << blob->bytecode.size() << " bytes\n";
```

## Common Errors

### Error: "Entry point not found"
**Cause:** Entry point name mismatch or missing `[shader("...")]` attribute

**Fix:**
```slang
// Make sure shader has attribute:
[shader("vertex")]
VSOutput myVertexShader(...) { ... }

// And C++ matches:
compiler.compileSlangToDXIL(source, "myVertexShader", ...);
```

### Error: "Module load failed"
**Cause:** Syntax error in shader source

**Fix:** Check `compiler.getLastError()` - will show line number and issue

### Error: "Link failed"
**Cause:** Usually type mismatch between shader stages

**Fix:** Verify VS output matches PS input exactly

### Error: "Target code generation failed"
**Cause:** Slang couldn't generate DXIL/SPIRV for some reason

**Fix:** 
- Check shader model compatibility
- Verify all types are supported
- May need to simplify shader temporarily

### Error: "D3D12 validation failed" (after successful Slang compilation)
**Cause:** Generated DXIL might be valid but not match D3D12 pipeline expectations

**Fix:**
- Check root signature matches shader bindings
- Verify input layout matches vertex shader
- Use PIX to inspect generated bytecode

## Performance Notes

### First Compilation Slow
**Expected:** First call to Slang API is slower (global session creation)

**Typical:**
- First shader: 100-500ms
- Subsequent: 10-50ms

**Don't worry about first-shader overhead in benchmarks**

### Compilation Caching
**Future optimization:** Cache compiled bytecode to disk

```cpp
// Pseudocode:
auto cacheKey = hash(source + entryPoint + target);
if (auto cached = loadFromCache(cacheKey)) {
    return cached;
}
auto compiled = compiler.compileSlangToDXIL(...);
saveToCache(cacheKey, compiled);
return compiled;
```

## Debug vs Release

### Debug Build
- Uses Debug Slang DLLs (if available)
- More error checking
- Slower compilation

### Release Build
- Uses Release Slang DLLs
- Faster compilation
- Less validation

**Make sure to deploy correct DLL variant!**

## Platform Differences

### Windows
- Need `slang.dll` in PATH or exe directory
- DXC runtime (`dxcompiler.dll`) also needed for D3D12

### Linux
- Need `libslang.so` in LD_LIBRARY_PATH or exe directory
- Set LD_LIBRARY_PATH or use rpath

### macOS
- Need `libslang.dylib`
- Use @rpath or DYLD_LIBRARY_PATH

## What Worked in Slang-GFX Backend

### ✅ These patterns work well:
1. Setting `Slang_ROOT` via environment variable
2. Copying DLLs via POST_BUILD commands
3. Conditional compilation (`USE_VULKAN` define)
4. DXC runtime detection and deployment
5. CMake module path extension

### ❌ What we're changing:
1. Not using `Slang::GFX` target
2. Not using `gfx-util/shader-cursor`
3. Not using slang-gfx device abstraction
4. Removing ImGui Slang renderer (was slang-gfx specific)

## Validation Checklist

Before committing:
- [ ] CMake configures without errors
- [ ] Builds without warnings
- [ ] Slang DLLs deploy correctly
- [ ] Simple shader compiles
- [ ] Application runs without crashes
- [ ] Rendering output looks correct
- [ ] No validation layer errors
- [ ] Performance acceptable

## Useful Commands

### Check Slang Installation
```powershell
& "$env:SLANG_PATH\bin\slangc.exe" --version
```

### Validate DXIL
```powershell
& "C:\Program Files (x86)\Windows Kits\10\bin\<version>\x64\dxil.exe" -T lib_6_5 -Vd shader.dxil
```

### Validate SPIRV
```powershell
spirv-val shader.spv
```

### Check DLL Dependencies
```powershell
dumpbin /dependents chameleonrt.exe
# Should show slang.dll
```

## Resources

- Slang Documentation: https://shader-slang.com/slang/user-guide/
- Slang GitHub: https://github.com/shader-slang/slang
- DXR Spec: https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html
- Vulkan Ray Tracing: https://www.khronos.org/blog/ray-tracing-in-vulkan

## Contact / Issues

If you hit issues during integration:
1. Check `compiler.getLastError()` for Slang-specific errors
2. Verify DLL deployment (missing DLL is #1 issue)
3. Compare with `reference/slang_CMakeLists.txt` for working patterns
4. Consult INTEGRATION_GUIDE.md for step-by-step
5. Review LEARNINGS.md for context on decisions

---

*Most issues are DLL-related or entry point name mismatches. Check those first!*
